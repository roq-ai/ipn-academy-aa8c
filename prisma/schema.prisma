generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cart {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?     @db.Uuid
  created_at DateTime    @default(now()) @db.Timestamp(6)
  updated_at DateTime    @default(now()) @db.Timestamp(6)
  user       user?       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cart_item  cart_item[]
}

model cart_item {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workshop_id String?   @db.Uuid
  cart_id     String?   @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  cart        cart?     @relation(fields: [cart_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workshop    workshop? @relation(fields: [workshop_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model certificate {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workshop_id String?   @db.Uuid
  user_id     String?   @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user        user?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workshop    workshop? @relation(fields: [workshop_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?    @db.VarChar(255)
  image       String?    @db.VarChar(255)
  name        String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  user_id     String     @db.Uuid
  tenant_id   String     @db.VarChar(255)
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workshop    workshop[]
}

model review {
  id                           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rating                       Int
  comment                      String?  @db.VarChar(255)
  user_id                      String?  @db.Uuid
  trainer_id                   String?  @db.Uuid
  created_at                   DateTime @default(now()) @db.Timestamp(6)
  updated_at                   DateTime @default(now()) @db.Timestamp(6)
  user_review_trainer_idTouser user?    @relation("review_trainer_idTouser", fields: [trainer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_review_user_idTouser    user?    @relation("review_user_idTouser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                          String         @unique @db.VarChar(255)
  firstName                      String?        @db.VarChar(255)
  lastName                       String?        @db.VarChar(255)
  roq_user_id                    String         @db.VarChar(255)
  tenant_id                      String         @db.VarChar(255)
  created_at                     DateTime       @default(now()) @db.Timestamp(6)
  updated_at                     DateTime       @default(now()) @db.Timestamp(6)
  cart                           cart[]
  certificate                    certificate[]
  organization                   organization[]
  review_review_trainer_idTouser review[]       @relation("review_trainer_idTouser")
  review_review_user_idTouser    review[]       @relation("review_user_idTouser")
  workshop                       workshop[]
}

model workshop {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String        @db.VarChar(255)
  description     String        @db.VarChar(255)
  vimeo_link      String        @db.VarChar(255)
  trainer_id      String?       @db.Uuid
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  cart_item       cart_item[]
  certificate     certificate[]
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user?         @relation(fields: [trainer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
